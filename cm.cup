/*Name: Saarthi Baluja and Sachin Subhas Nambisan*/

/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
import java.util.ArrayList;
import java.util.Arrays;

   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    public ArrayList <String> definedVar = new ArrayList <String>();
    ArrayList<String> definedFuncs = new ArrayList<>(Arrays.asList("input", "output"));

    public Boolean isDefinedVar(String varName){
        for (String var : definedVar){
            if (var.equals(varName)){
                return true;
            }
        }
        return false;
    }

    /*method to check if a function is defined*/
    public Boolean isDefinedFunc(String funcName){
        for (String func : definedFuncs){
            if (func.equals(funcName)){
                return true;
            }
        }
        return false;
    }
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, THEN, ELSE, END, RETURN, WHILE;
terminal ASSIGN, EQ, LT, GT, LTE, GTE, NE, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, LSQBRK, RSQBRK, SEMI, COMMA;
terminal String ID, NUM, INT, VOID;
terminal ERROR;
   
non terminal DecList dec_seq, program;
non terminal VarDecList local_decs, param_seq, params;
non terminal ExpList stmt_list, args;
non terminal Exp stmt, com_exp, simple_exp;
non terminal Exp exp, factor;
non terminal CompoundExp cmpd_stmt;
non terminal Dec dec;
non terminal Var var;
non terminal VarDec dec_var, param; 
non terminal NameTy type_spec;
non terminal Integer relop;
non terminal varUndefined;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left error;
precedence left ELSE;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

/* 1. {Program}  */
/*<program> -> <declaration-list>*/
program	      ::= dec_seq:s
                 {: RESULT = s; :}
              ;

/* 2. Declaration List  */
/*<declaration-list>*/
dec_seq         ::= dec_seq:s1 dec:s2
                    {:  
                        DecList t = s1;
                        if (t.head == null) {
                            t.head = s2;
                        } else {
                            while( t.tail != null )
                                t = t.tail;
                            t.tail = new DecList(s2, null);
                        }
                        RESULT = s1;
                    :}
                |   dec:s 
                    {: RESULT = new DecList(s, null); :}
                |   error:e SEMI
                    {: 
                        parser.report_error("invalid declaration", null); 
                        RESULT = new DecList(null, null); 
                    :}
               ;


/* 3. Declarations combined with 6.Function Declarations*/
/*<declaration> -> <var-declaration> | <fun-declaration> */
/*<fun-declaration> -> <type-specifier> ID ( <params> ) <compoundstmt>*/
dec             ::= dec_var: v
                    {: RESULT = v; :}
                |   type_spec:t ID:i LPAREN params:p RPAREN cmpd_stmt:c
                    {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); 
                       parser.definedFuncs.add(i);
                    :}
                ;

/* 4. Variable Declaration*/
/*<var-declaration> -> <type-specifier> ID ; | <type-specifier> ID [ NUM ] ;*/
dec_var         ::= type_spec:t ID:i SEMI
                    {: RESULT = new SimpleDec(tleft, tright, t, i);
                       parser.definedVar.add(i);
                    :}
                |   type_spec:t ID:i LSQBRK NUM:n RSQBRK SEMI
                    {: RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(nleft, nright, n)); 
                       parser.definedVar.add(i);
                    :}
                ;

/* 5. Type Specifier  */
/*<type-specifier> -> int | void*/
type_spec       ::= INT:i
                    {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                |   VOID:v
                    {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                ;

/* 7. Paramaters  */
/*<params> -> <param-list> | void*/
params          ::= param_seq:s
                    {: RESULT = s; :}
                |   VOID:v
                    {: RESULT = new VarDecList(null, null); :}
                ;

/* 8. Paramaters List  */
/*<param-list> -> <param-list> , <param> | <param>*/
param_seq       ::= param_seq:s COMMA param:p
                    {: 
                        VarDecList v = s;
                        if (v.head == null) {
                            v.head = p;
                        } else {
                            while( v.tail != null )
                                v = v.tail;
                            v.tail = new VarDecList(p, null);
                        }
                        RESULT = s;
                    :}
                |   param:p
                    {: RESULT = new VarDecList(p, null); :}
                ;

/* 9. Parameter  */
/*<param> -> <type-specifier> ID | <type-specifier> ID [ ]*/
param           ::= type_spec:t ID:i 
                    {: RESULT = new SimpleDec(tleft, tright, t, i); :}
                |   type_spec:t ID:i LSQBRK RSQBRK
                    {: RESULT = new ArrayDec(tleft, tright, t, i, null); :}
                ;

/* 10. Compound Statement */
/*<compound-stmt> -> { <local-declarations> <statement-list> }*/
cmpd_stmt       ::= THEN:t local_decs:l stmt_list:s END:e
                    {: RESULT = new CompoundExp(tleft, tright, l, s); :}
                |   THEN:t error END:e
                    {: RESULT = new CompoundExp(tleft, tright, null, null); :}
                ;

/* 11. Local Declarations */
/*<local-declarations> -> <local-declarations> <var-declaration>|*/
local_decs      ::= local_decs:l dec_var:d
                    {: 
                        VarDecList v = l;
                        if (v.head == null) {
                            v.head = d;
                        } else {
                            while( v.tail != null )
                                v = v.tail;
                            v.tail = new VarDecList(d, null);
                        }
                        RESULT = l;
                    :}
                |   
                    {: RESULT = new VarDecList(null, null); :}
                ;

/* 12. Statement List */
/*<statement-list> -> <statement-list> <statement> |*/
stmt_list       ::= stmt_list:l stmt:s
                    {: 
                        ExpList e = l;
                        if (e.head == null) {
                            e.head = s;
                        } else {
                            while( e.tail != null )
                                e = e.tail;
                            e.tail = new ExpList(s, null);
                        }
                        RESULT = l;
                    :}
                |   
                    {: RESULT = new ExpList(null, null); :}
                ;

/* 13. Statement*/
/*<statement> -> <expression-stmt> | <compound-stmt>| <selection-stmt> | <iteration-stmt>| <return-stmt>*/

/* 14. Expression Statement */
/*<expression-stmt> -> <expression> ; | ;*/

/* 15. Selection Statement */
/*<selection-stmt> -> if ( <expression> ) <statement>| if ( <expression> ) <statement> else <statement>*/

/* 16. Iteration Statement */
/*<iteration-stmt> -> while ( <expression> ) <statement>*/

/* 17. Return Statement */
/*<return-stmt> -> return <expression> ; | return ;*/

/* Rules 13,14,15,16 and 17 Combined*/
stmt          ::= exp:e SEMI:s
                  {: RESULT = e; :}
              |   SEMI:s
                  {: RESULT = new NilExp(sleft, sright); :}
              |   cmpd_stmt:c
                  {: RESULT = c; :}
              |   IF:i LPAREN exp:e RPAREN stmt:s
                  {: RESULT = new IfExp(ileft, iright, e, s, null); :}
              |   IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
                  {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
              |   WHILE:w LPAREN exp:e RPAREN stmt:s
                  {: RESULT = new WhileExp(wleft, wright, e, s); :}
              |   RETURN:r exp:e SEMI
                  {: RESULT = new ReturnExp(rleft, rright, e); :}
              |   RETURN:r SEMI
                  {: RESULT = new ReturnExp(rleft, rright, null); :}
              |   error:e SEMI:s
                  {:
                    parser.report_error("Invalid Statement", null); 
                    RESULT = new ErrorExp(sleft, sright);
                  :}  
              ;
              

/* 18. Expression */
/*<expression> -> <var> = <expression> | <simple-expression>*/

/* 20. Simple Expression */
/*<simple-expression> -> <additive-expression> <relop> <additiveexpression>| <additive-expression>*/
/* Rules 18 and 20 have been Combined*/
exp           ::= var:v ASSIGN exp:e
                  {: RESULT = new AssignExp(vleft, vright, new VarExp(vleft,vright, v), e); :}
              |   simple_exp:s
                  {: RESULT = s; :}
              ;

simple_exp   ::=  com_exp:a1 relop:r com_exp:a2
                  {: RESULT = new OpExp(a1left, a1right, a1, r, a2); :}
              |   com_exp:a
                  {: RESULT = a; :}
              ;

/* 22. Combine Expression */
com_exp       ::= com_exp:e PLUS:a com_exp:e2
                  {: RESULT = new OpExp(eleft, eright, e, OpExp.PLUS, e2); :}
              |   com_exp:e MINUS:a com_exp:e2
                  {: RESULT = new OpExp(eleft, eright, e, OpExp.MINUS, e2); :}
              |   com_exp:e TIMES:a com_exp:e2
                  {: RESULT = new OpExp(eleft, eright, e, OpExp.MUL, e2); :}
              |   com_exp:e OVER:a com_exp:e2
                  {: RESULT = new OpExp(eleft, eright, e, OpExp.DIV, e2); :}
              |   factor:t
                  {: RESULT = t; :}
              ;

/* 26. Factor  */
/*<factor> -> ( <expression> ) | <var> | <call> | NUM*/

/* 27. Call  */
/*<call> -> ID ( <args> )*/

/* Rules 26 and 27 have been Combined*/
factor      ::= LPAREN:l exp:e RPAREN:r
                {: RESULT = e; :}
            |   var:v
                {: RESULT = new VarExp(vleft, vright, v); :}
            |   ID:i LPAREN args:a RPAREN
                {: RESULT = new CallExp(ileft, iright, i, a); :}
            |   NUM:n
                {: RESULT = new IntExp(nleft, nright, n); :}
            ;

/* 19. Variable */
/*<var> -> ID | ID [ <expression> ]*/
var           ::= ID:i
                  {: RESULT = new SimpleVar(ileft, iright, i); :}
              |   ID:i LSQBRK exp:e RSQBRK
                  {: RESULT = new IndexVar(ileft, iright, i, e); :}
              ;

/* 21. Relative Operation */
/*<relop> -> <= | < | > | >= | == | !=*/
relop       ::= LTE 
                {: RESULT = OpExp.LE; :}
            |   LT
                {: RESULT = OpExp.LT; :}
            |   GT
                {: RESULT = OpExp.GT; :}
            |   GTE
                {: RESULT = OpExp.GE; :}
            |   EQ
                {: RESULT = OpExp.EQ; :}
            |   NE
                {: RESULT = OpExp.NE; :}
            ;

/* 28. Arguments  */
/*<args> -> <arg-list> |*/

/* 29. Argument List  */
/*<arg-list> -> <arg-list> , <expression> | <expression>*/

/* Rules 28 and 29 have been combined */
args        ::= args:a COMMA exp:e
                {: 
                    ExpList l = a;
                    if (l.head == null) {
                        l.head = e;
                    } else {
                        while( l.tail != null )
                            l = l.tail;
                        l.tail = new ExpList(e, null);
                    }
                    RESULT = a;
                :}
            |   exp:e
                {: RESULT = new ExpList(e, null); :}
            |   
                {: RESULT = new ExpList(null, null); :}
            ;

